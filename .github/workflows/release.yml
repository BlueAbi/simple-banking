name: Version Release # Workflow name

on:
  push:
    tags:
      - 'v*' # Trigger this workflow on any Git tag starting with 'v' (e.g., v1.0.0, v2.1.5)

jobs:
  release:
    runs-on: ubuntu-latest # The operating system for the GitHub Actions runner
    permissions:
      contents: write # Grants necessary permissions to create GitHub Releases and upload assets

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Action to clone your repository
      with:
        fetch-depth: 0 # Ensures all Git history, including tags, is available

    - name: Set up JDK 17
      uses: actions/setup-java@v4 # Action to set up the Java Development Kit environment
      with:
        java-version: '17'
        distribution: 'temurin' # Recommended open-source JDK distribution

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew # Makes the Gradle Wrapper script executable

    - name: Get tag version
      id: get_version # Assigns an ID to this step to reference its output later
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      # This command extracts the actual version string (e.g., "1.0.1") from the full Git ref (e.g., "refs/tags/v1.0.1").
      # It then stores this cleaned version in an output variable called RELEASE_VERSION.

    - name: Build with Gradle
      run: ./gradlew clean build -Pversion=${{ steps.get_version.outputs.RELEASE_VERSION }}
      # Executes the Gradle build.
      # The '-Pversion=' argument passes the extracted tag version to your build.gradle file.
      # Gradle will then use this version for the JAR file's name and internal manifest.

    - name: List contents of build/libs # <--- NEW DEBUGGING STEP
      run: |
        echo "Listing contents of build/libs directory:"
        ls -l build/libs/
        echo "Listing contents of build/ directory (recursive):"
        ls -R build/

    - name: Archive source files as .zip and .tar.gz
      run: |
        mkdir -p release
        zip -r release/simple-banking-${{ steps.get_version.outputs.RELEASE_VERSION }}-src.zip . -x "release/*" ".git/*" ".gradle/*" "build/*"
        tar -czf release/simple-banking-${{ steps.get_version.outputs.RELEASE_VERSION }}-src.tar.gz --exclude=release --exclude=.git --exclude=.gradle --exclude=build .

    - name: Upload release assets to GitHub
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/simple-banking-${{ steps.get_version.outputs.RELEASE_VERSION }}-src.zip
          release/simple-banking-${{ steps.get_version.outputs.RELEASE_VERSION }}-src.tar.gz
          build/libs/bankapp-${{ steps.get_version.outputs.RELEASE_VERSION }}.jar # This path assumes 'bankapp' is your project name and the JAR is in build/libs/
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
